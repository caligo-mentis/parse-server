"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GridFSBucketAdapter = void 0;

var _mongodb = require("mongodb");

var _FilesAdapter = require("./FilesAdapter");

var _defaults = _interopRequireDefault(require("../../defaults"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 GridFSBucketAdapter
 Stores files in Mongo using GridStore
 Requires the database adapter to be based on mongoclient

 
 */
// -disable-next
class GridFSBucketAdapter extends _FilesAdapter.FilesAdapter {
  constructor(mongoDatabaseURI = _defaults.default.DefaultMongoURI, mongoOptions = {}) {
    super();
    this._databaseURI = mongoDatabaseURI;
    const defaultMongoOptions = {
      useNewUrlParser: true,
      useUnifiedTopology: true
    };
    this._mongoOptions = Object.assign(defaultMongoOptions, mongoOptions);
  }

  _connect() {
    if (!this._connectionPromise) {
      this._connectionPromise = _mongodb.MongoClient.connect(this._databaseURI, this._mongoOptions).then(client => {
        this._client = client;
        return client.db(client.s.options.dbName);
      });
    }

    return this._connectionPromise;
  }

  _getBucket() {
    return this._connect().then(database => new _mongodb.GridFSBucket(database));
  } // For a given config object, filename, and data, store a file
  // Returns a promise


  async createFile(filename, data) {
    const bucket = await this._getBucket();
    const stream = await bucket.openUploadStream(filename);
    await stream.write(data);
    stream.end();
    return new Promise((resolve, reject) => {
      stream.on('finish', resolve);
      stream.on('error', reject);
    });
  }

  async deleteFile(filename) {
    const bucket = await this._getBucket();
    const documents = await bucket.find({
      filename: filename
    }).toArray();

    if (documents.length === 0) {
      throw new Error('FileNotFound');
    }

    return Promise.all(documents.map(doc => {
      return bucket.delete(doc._id);
    }));
  }

  async getFileProperties(filename) {
    const bucket = await this._getBucket();
    const documents = await bucket.find({
      filename: filename
    }).toArray();

    if (documents.length === 0) {
      throw new Error('FileNotFound');
    }

    return documents[0];
  }

  getFileLocation(config, filename) {
    return config.mount + '/files/' + config.applicationId + '/' + encodeURIComponent(filename);
  }

  async getFileStream(filename, options) {
    const bucket = await this._getBucket();
    const {
      start = 0,
      end
    } = options;
    let expectedEnd;
    if (end) expectedEnd = end + 1;
    return bucket.openDownloadStreamByName(filename, {
      start,
      end: expectedEnd
    });
  }

  handleShutdown() {
    if (!this._client) {
      return Promise.resolve();
    }

    return this._client.close(false);
  }

}

exports.GridFSBucketAdapter = GridFSBucketAdapter;
var _default = GridFSBucketAdapter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,